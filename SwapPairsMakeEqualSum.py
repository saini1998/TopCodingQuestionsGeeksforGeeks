"""

Given two arrays of integers A[] and B[] of size N and M, the task is to check if a pair of values (one value from each array) exists such that swapping the elements of the pair will make the sum of two arrays equal.

 

Example 1:

Input: N = 6, M = 4
A[] = {4, 1, 2, 1, 1, 2}
B[] = (3, 6, 3, 3)
Output: 1
Explanation: Sum of elements in A[] = 11
Sum of elements in B[] = 15, To get same 
sum from both arrays, we can swap following 
values: 1 from A[] and 3 from B[]
Example 2:

Input: N = 4, M = 4
A[] = {5, 7, 4, 6}
B[] = {1, 2, 3, 8}
Output: 1
Explanation: We can swap 6 from array 
A[] and 2 from array B[]
Your Task:
This is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function findSwapValues() that takes array A, array B, integer N, and integer M as parameters and returns 1 if there exists any such pair otherwise returns -1.

 

Expected Time Complexity: O(MlogM+NlogN).
Expected Auxiliary Space: O(1).

 

Constraints:
1 ≤ N, M ≤ 106

"""

def findSwapValues(a, n, b, m):
        t  = (sum(a)-sum(b))/2
        a.sort()
        b.sort()
        i, j = 0,0
        while (i<len(a) and j<len(b)):
            diff = a[i] - b[j]
            if diff == t:
                return 1
            elif diff < t:
                i += 1
            else:
                j+= 1
        return -1


stringA = "714 844 465 258 166 392 326 52 50 132 978 123 635 777 793 896 653 706 822 559 811 640 837 273 532 334 752 878 294 508 168 518 296 497 499 720 405 412 45 201 282 868 655 826 357 764 104 929 829 919 139 471 211 819 189 298 21 158 147 124 74 361 210 714 535 733 748 150 283 488 328 995 397 423 539 621 532 628 999 972 786 274 14 558 172 151 644 513 199 358 564 164 153 234 12 661 602 442 257 860 334 824 495 847 390 546 824 205 131 855 936 341 279 658 497 4 726 87 731 404 452 98 618 176 312 190 231 831 580 298 170 194 93 968 759 804 549 998 652 166 15 830 758 283 995 97 951 881 447 914 859 340 6 691 120 369 292 465 913 156 567 24 224 805 236 367 258 602 611 379 670 826 132 948 768 607 781 139 670 558 708 436 461 755 220 548 753 949 109 702 708 789 26 907 490 192 962 163 325 983 188 212 836 333 963 974 78 559 118 500 750 358 191 893 398 591 119 385 10 345 632 440 331 99 392 563 367 478 624 237 10 261 423 269 470 9 217 653 185 944 857 954 206 462 644 134 608 984 194 674 370 671 397 845 276 923 922 959 825 446 617 511 860 131 909 151 566 946 778 570 818 507 186 477 337 74 892 40 1 204 434 353 729 454 687 700 773 70 796 677 901 816 510 494 940 734 855 116 345 845 904 263 16 556 867 634 350 818 92 198 615 844 619 771 83 597 843 635 6 66 474 428 437 785 428 80 108 973 497 160 58 116 666 578 469 839 708 225 222 404 248 821 10 256 859 900 456 603 843 618 572 161 295 822 77 802 691 598 541 71 767 345 48 222 653 285 108 670 290 174 824 532 963 926 922 239 386 788 82 42 123 686 190 578 328 384 508 604 690 105 505 390 208 377 49 271 914 937 935 304 948 673 285 45 454 752 156 984 594 258 835 272 643 933 669 12 480 820 955 497 28 940 386 493 135 437 745 863 152 976 117 564 999 571 612 345 804 433 743 253 325 868 911 408 213 742 115 382 845 531 925 889 901 516 957 456 54 260 576 184 176 100 315 717 214 16 555 43 478 924 334 825 415 112 758 544 62 276 396 834 306 386 194 72 730 372 909 431 327 463 792 352 592 868 280 600 550 349 733 867 77 174 851 181 478 874 254 219 662 207 851 990 389 733 60 252 47 469 622 462 83 124 760 9 753 564 682 995 129 242 992 825 348 542 389 444 953 135 144 140 794 706 256 448 365 669 827 836 630 739 190 547 388 613 519 168 953 303 202 255 461 94 31 604 443 481 359 565 385"
stringB = "1558 723 558 378 182 1101 1412 1689 1359 1381 1451 1110 866 1630 802 686 793 1219 817 246 1150 1481 1121 1033 1748 610 1030 487 179 271 435 924 1268 898 771 1323 820 1160 1160 1971 1060 572 323 1157 557 728 387 673 1044 1117 1158 1342 936 1029 986 1277 937 501 813 1135 550 794 502 1062 878 364 1061 1563 1547 818 845 1041 1092 1832 1361 1199 697 489 757 1069 591 1029 603 860 990 1496 1080 1375 920 1228 1144 1216 768 1702 811 1497 933 682 1125 1308 400 1169 1937 637 618 1108 1084 989 504 355 1072 430 955 845 861 271 692 479 870 1129 1811 668 778 1592 868 1041 1242 1199 1881 1271 1128 991 1060 1512 1348 1325 663 411 932 205 787 1183 1387 843 1473 1717 1004 1674 971 1190 1167 572 1501 1168 290 1459 1390 680 1478 72 902 1222 508 1081 657 174 1244 1308 933 626 1069 266 1759 1059 1461 733 1117 879 1289 612 1112 270 938 778 464 1356 1889 1161 1174 124 809 768 712 1112 795 895 585 320 1851 1239 1621 330 1206 1140 852 1107 1576 681 1300 1452 968 879 572 1608 1128 681 1570 957 1237 996 1193 1319 955 497 1376 1814 1417 1413 314 760 276 1032 230 598 1402 1159 527 1302 338 1230 692 266 1102 1340 790 1144 1460 880 899 1600 251 1032 1352 473 869 1841 1122 312 516 1084 207 769 1317 1677 371 1817 890 833 1088 284 1500 704 1034 1663 1369 737 1001 687 1256 457 555 635 924 924"
A = list(map(int, stringA.split()))
B = list(map(int, stringB.split()))
n = 569
m = 284
print(findSwapValues(A,n,B,m))